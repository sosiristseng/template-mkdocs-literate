name: Build notebooks and publish

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NPROC: '2' # Number of Julia processes to run the notebooks
  PYTHON_VER: '3.11'
  JULIA_CPU_TARGET: 'generic;haswell,clone_all'
  JULIA_NUM_THREADS: 'auto'
  JULIA_CONDAPKG_BACKEND: 'Null'
  JULIA_CI: 'true'
  GKSwstype: '100'

jobs:
  execute:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Read Julia version
        uses: SebRollen/toml-action@v1.0.2
        id: read_toml
        with:
          file: 'Manifest.toml'
          field: 'julia_version'
      - name: Install Julia using jill.sh
        run: |
          wget -O /tmp/jill.sh https://raw.githubusercontent.com/abelsiqueira/jill/main/jill.sh
          bash /tmp/jill.sh --version ${{ steps.read_toml.outputs.value }} -y
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Cache Julia deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.julia/artifacts
            ~/.julia/compiled
            ~/.julia/packages
            ~/.julia/environments
          key: ${{ runner.os }}-jill-${{ hashFiles('src/**','Project.toml', 'Manifest.toml')}}
          restore-keys: |
            ${{ runner.os }}-jill-
      - name: Setup Python
        uses: actions/setup-python@v4
        id: python3
        with:
          python-version: ${{ env.PYTHON_VER }}
          cache: 'pip'
      - name: Install Python deps
        run: python -m pip install -r requirements.txt
      - name: Install Julia deps
        env:
          PYTHON: ${{ steps.python3.outputs.python-path }}
          JULIA_PYTHONCALL_EXE: ${{ steps.python3.outputs.python-path }}
        run: |
          julia --color=yes -e 'using Pkg; Pkg.add(["PrettyTables", "Literate"])'
          julia --project=@. --color=yes -e 'using Pkg; Pkg.activate("."); Pkg.instantiate(); Pkg.gc()'
      - name: Run program
        env:
          JULIA_PROJECT: '@.'
        run: julia --color=yes -p ${{ env.NPROC }} literate.jl
      - name: Upload Results
        uses: actions/upload-artifact@v3
        with:
          name: notebooks
          path: docs/
          retention-days: 1

  render:
    needs: execute
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download notebooks
        uses: actions/download-artifact@v3
        with:
          name: notebooks
          path: out/
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: out
      - name: Copy back built notebooks
        run: cp --verbose -rf out/* docs/
      - name: Setup micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: conda.yml
          init-shell: bash
          cache-environment: true
          post-cleanup: all
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Build website
        shell: micromamba-shell {0}
        env:
          SITE_URL: ${{ steps.pages.outputs.base_url }}
          REPO_URL: ${{ github.server_url	}}/${{ github.repository }}
          REPO_NAME: ${{ github.repository }}
        run: mkdocs build
      - name: Upload pages artifact
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./site

  # CI conclusion for GitHub status check
  # Adaped from https://brunoscheufler.com/blog/2022-04-09-the-required-github-status-check-that-wasnt
  CI:
    needs: render
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [[ ${{ needs.render.result }} == "success" ]]; then
            echo "Tests passed"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi

  deploy:
    name: Deploy to GitHub pages
    needs: render
    if: ${{ github.ref == 'refs/heads/main'}}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
