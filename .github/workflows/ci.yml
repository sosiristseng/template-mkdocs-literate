name: Build notebooks and publish

# Using SSH deploy keys for automerge, so `push` events only
on:
  workflow_dispatch:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NPROC: '2' # Number of Julia processes to run the notebooks

jobs:
  CI:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner	}}
          password: ${{ github.token	}}
      - name: Get docker image hash
        id: hash
        run: echo "id=${{ hashFiles('requirements.txt', 'Project.toml', 'Manifest.toml', 'src/**', 'env.Dockerfile') }}" >> "$GITHUB_OUTPUT"
      - name: Set image name
        run: echo "IMG=ghcr.io/${{ github.repository }}:${{ steps.hash.outputs.id }}" >> "$GITHUB_ENV"
      - name: Build and load Docker container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: 'env.Dockerfile'
          tags: ${{ env.IMG }}
          load: true
          cache-from: type=registry,ref=${{ env.IMG }}
      - name: Build notebooks with ${{ env.NPROC }} processes
        run: >
          docker run --rm -e JULIA_PROJECT=@. -w /tmp -v ${{ github.workspace }}:/tmp
          ${{ env.IMG }}
          julia --color=yes -p ${{ env.NPROC }} literate.jl
      - name: Retake ownership
        run: sudo chown -R $USER docs/
      - name: Setup micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: conda.yml
          init-shell: bash
          cache-environment: true
          post-cleanup: all
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Build website
        shell: micromamba-shell {0}
        env:
          SITE_URL: ${{ steps.pages.outputs.base_url }}
          REPO_URL: ${{ github.server_url	}}/${{ github.repository }}
          REPO_NAME: ${{ github.repository }}
        run: mkdocs build
      - name: Upload pages artifact
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./site
      - name: Set output flag
        id: setoutput
        run: echo "success=true" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to GitHub pages
    needs: CI
    if: ${{ github.ref == 'refs/heads/main'}}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
