name: Build notebooks and publish

# Using SSH deploy key for automerge, so there is no `pull_request` event
on:
  workflow_dispatch:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NPROC: '2' # Number of Julia processes to run the notebooks
  PYTHON_VER: '3.11'
  JULIA_CPU_TARGET: 'generic;haswell,clone_all'
  JULIA_NUM_THREADS: 'auto'
  JULIA_CONDAPKG_BACKEND: 'Null'
  GKSwstype: '100'

jobs:
  execute:
    container:
      image: julia:1.9.3
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VER }}
      - name: Install Python deps
        run: python -m pip install --no-cache-dir -r requirements.txt
      - name: Cache Julia deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.julia/artifacts
            ~/.julia/compiled
            ~/.julia/packages
          key: ${{ runner.os }}-juliacontainer-${{ hashFiles('Manifest.toml')}}
          restore-keys: |
            ${{ runner.os }}-juliacontainer-
      - name: Install Julia packages
        env:
          PYTHON: ${{ env.pythonLocation }}/python
          JULIA_PYTHONCALL_EXE: ${{ env.pythonLocation }}/python
        run: julia --color=yes setup.jl
      - name: Build notebooks with ${{ env.NPROC }} processes
        env:
          JULIA_PROJECT: '@.'
        run: julia --color=yes -p ${{ env.NPROC }} literate.jl
      - name: Upload notebooks
        uses: actions/upload-artifact@v3
        with:
          name: notebooks
          path: docs
          retention-days: 1

  render:
    needs: execute
    runs-on: ubuntu-latest
    # store success output flag for the ci job
    outputs:
      success: ${{ steps.setoutput.outputs.success }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download notebooks
        uses: actions/download-artifact@v3
        with:
          name: notebooks
          path: out/
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: out
      - name: Copy back built notebooks
        run: cp --verbose -rf out/* docs/
      - name: Setup Python ${{ env.PYTHON_VER }}
        uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ env.PYTHON_VER }}
          cache: 'pip'
          cache-dependency-path: '.github/requirements.txt'
      - name: Install Python dependencies
        run: pip install -r .github/requirements.txt
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Build website
        env:
          SITE_URL: ${{ steps.pages.outputs.base_url }}
          REPO_URL: ${{ github.server_url	}}/${{ github.repository }}
          REPO_NAME: ${{ github.repository }}
        run: mkdocs build
      - name: Upload pages artifact
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./site
      - name: Set output flag
        id: setoutput
        run: echo "success=true" >> $GITHUB_OUTPUT

  # CI conclusion for GitHub status check
  # https://brunoscheufler.com/blog/2022-04-09-the-required-github-status-check-that-wasnt
  CI:
    needs: render
    if: always()
    runs-on: ubuntu-latest
    steps:
      # pass step only when output of previous render job is set
      # in case at least one of the execution fails, render is skipped
      # and the output will not be set, which will then cause the ci job to fail
      - run: |
          passed="${{ needs.render.outputs.success }}"
          if [[ $passed == "true" ]]; then
            echo "Tests passed"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi

  deploy:
    name: Deploy to GitHub pages
    needs: render
    if: ${{ github.ref == 'refs/heads/main'}}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
