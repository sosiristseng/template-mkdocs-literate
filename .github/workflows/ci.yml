name: Build notebooks and publish

# Using SSH deploy key for automerge, so there is no `pull_request` event
on:
  workflow_dispatch:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NPROC: '2' # Number of Julia processes to run the notebooks

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    outputs:
      hash: ${{ steps.hash.outputs.id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner	}}
          password: ${{ github.token	}}
      - name: Get docker image hash
        id: hash
        run: echo "id=${{ hashFiles('requirements.txt', 'Project.toml', 'Manifest.toml', 'src/**', '.github/Dockerfile') }}" >> "$GITHUB_OUTPUT"
      - name: Build and cache Docker container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: '.github/Dockerfile'
          tags: ghcr.io/${{ github.repository }}:${{ steps.hash.outputs.id }}
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:${{ steps.hash.outputs.id }}
          cache-to: type=inline

  execute:
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}:${{ needs.setup.outputs.hash }}
    # store success output flag for the ci job
    outputs:
      success: ${{ steps.setoutput.outputs.success }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build notebooks with ${{ env.NPROC }} processes
        run: JULIA_PROJECT=@. julia --color=yes -p ${{ env.NPROC }} literate.jl
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Build website
        env:
          SITE_URL: ${{ steps.pages.outputs.base_url }}
          REPO_URL: ${{ github.server_url	}}/${{ github.repository }}
          REPO_NAME: ${{ github.repository }}
        run: mkdocs build
      - name: Upload pages artifact
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./site
      - name: Set output flag
        id: setoutput
        run: echo "success=true" >> $GITHUB_OUTPUT

  # CI conclusion for GitHub status check
  # https://brunoscheufler.com/blog/2022-04-09-the-required-github-status-check-that-wasnt
  CI:
    needs: execute
    if: always()
    runs-on: ubuntu-latest
    steps:
      # pass step only when output of previous render job is set
      # in case at least one of the execution fails, render is skipped
      # and the output will not be set, which will then cause the ci job to fail
      - run: |
          passed="${{ needs.execute.outputs.success }}"
          if [[ $passed == "true" ]]; then
            echo "Tests passed"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi

  deploy:
    name: Deploy to GitHub pages
    needs: execute
    if: ${{ github.ref == 'refs/heads/main'}}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
